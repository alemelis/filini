services:
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   networks:
  #     - filini_network
  #   environment:
  #     DB_HOST: db
  #     DB_USER: ${DB_USER}
  #     DB_PASSWORD: ${DB_PASSWORD}
  #     DB_NAME: ${DB_NAME}
  #     DB_PORT: ${DB_PORT}
  #   restart: unless-stopped
  #   volumes:
  #     - ./backend/storage:/app/storage
  #   command: ["/usr/local/bin/filini"]

  # Frontend service
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - "3000:3000"
  #   depends_on:
  #     - backend
  #   networks:
  #     - filini_network
  #   restart: unless-stopped
  #   environment:
  #     - REACT_APP_API_URL=http://pi4.local:8080
  #   command: ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "3000"]

  # Database service
  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - filini_network
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data

volumes:
  postgres_data:

networks:
  filini_network:
    driver: bridge
